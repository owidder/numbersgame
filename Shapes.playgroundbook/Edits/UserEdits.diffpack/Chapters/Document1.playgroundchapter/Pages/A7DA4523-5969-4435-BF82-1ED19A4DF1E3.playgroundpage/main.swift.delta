<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import SpriteKit

let RADIUS: Int = 150

// Sets up the LiveView.
</string>
			<key>ModifiedRange</key>
			<string>{6710, 66}</string>
			<key>OriginalContent</key>
			<string>// /*#-localizable-zone(shapesTemplate1)*/Sets up the LiveView./*#-end-localizable-zone*/
</string>
			<key>OriginalRange</key>
			<string>{6710, 90}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>func addGravityField(q1: Int, q2: Int) -&gt; Void {
    let gravityField = SKFieldNode.radialGravityField()
    gravityField.position = CGPoint(x:scene.frame.width/CGFloat(q1), y:scene.frame.height/CGFloat(q2))
    scene.addChild(gravityField)
}

func addRandomGravityFields(count: Int) -&gt; Void {
    for _ in 1...count {
        addGravityField(q1: Int.random(in: 1...10), q2: Int.random(in: 1...10))
    }
}

scene.physicsWorld.gravity = CGVector(dx:0, dy: 0)
addRandomGravityFields(count: 1)

let ballCategory: UInt32 = 0b0001
let edgeCategory: UInt32 = 0b0010

// Creates a circle graphic.
let circle = Graphic.circle(radius: RADIUS, color: #colorLiteral(red: 0.4550631046, green: 0.6557807326, blue: 0.9979295135, alpha: 1.0))
</string>
			<key>ModifiedRange</key>
			<string>{6793, 729}</string>
			<key>OriginalContent</key>
			<string>// /*#-localizable-zone(shapesTemplate2)*/Creates a circle graphic./*#-end-localizable-zone*/
let circle = Graphic.circle(radius: 100, color: #colorLiteral(red: 0.4550631046, green: 0.6557807326, blue: 0.9979295135, alpha: 1.0))
</string>
			<key>OriginalRange</key>
			<string>{6817, 229}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>circle.physicsBody = SKPhysicsBody(circleOfRadius: CGFloat(RADIUS))
circle.physicsBody!.categoryBitMask = ballCategory

let edge = SKPhysicsBody(edgeLoopFrom: scene.frame)
edge.categoryBitMask = edgeCategory
edge.contactTestBitMask = ballCategory
edge.collisionBitMask = ballCategory
scene.physicsBody = edge




</string>
			<key>ModifiedRange</key>
			<string>{7584, 313}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{7108, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
