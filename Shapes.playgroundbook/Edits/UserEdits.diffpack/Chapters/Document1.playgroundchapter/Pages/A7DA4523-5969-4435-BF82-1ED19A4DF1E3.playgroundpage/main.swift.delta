<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Document1.playgroundchapter/Pages/template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import SpriteKit
import os

let RADIUS: Int = 150

// Sets up the LiveView.
</string>
			<key>ModifiedRange</key>
			<string>{6710, 76}</string>
			<key>OriginalContent</key>
			<string>// /*#-localizable-zone(shapesTemplate1)*/Sets up the LiveView./*#-end-localizable-zone*/
</string>
			<key>OriginalRange</key>
			<string>{6710, 90}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>func addGravityField(q1: Int, q2: Int) -&gt; Void {
    let gravityField = SKFieldNode.radialGravityField()
    gravityField.position = CGPoint(x:scene.frame.width/CGFloat(q1), y:scene.frame.height/CGFloat(q2))
    scene.addChild(gravityField)
}

func addRandomGravityFields(count: Int) -&gt; Void {
    for _ in 1...count {
        addGravityField(q1: Int.random(in: 1...10), q2: Int.random(in: 1...10))
    }
}

func randomGravity() -&gt; CGVector {
    switch Int.random(in: 1...4) {
    case 1:
        return CGVector(dx:1, dy:0)
    
    case 2:
        return CGVector(dx: -1, dy: 0)
    
    case 3:
        return CGVector(dx: 0, dy: 1)
            
    default:
        return CGVector(dx: 0, dy: -1)
    }
}

scene.physicsWorld.gravity = randomGravity()
scene.view!.showsPhysics = true

let ballCategory: UInt32 = 0b0001
let edgeCategory: UInt32 = 0b0010

// Creates a circle graphic.
let circle = Graphic.circle(radius: RADIUS, color: #colorLiteral(red: 0.4550631046, green: 0.6557807326, blue: 0.9979295135, alpha: 1.0))
</string>
			<key>ModifiedRange</key>
			<string>{6803, 1025}</string>
			<key>OriginalContent</key>
			<string>// /*#-localizable-zone(shapesTemplate2)*/Creates a circle graphic./*#-end-localizable-zone*/
let circle = Graphic.circle(radius: 100, color: #colorLiteral(red: 0.4550631046, green: 0.6557807326, blue: 0.9979295135, alpha: 1.0))
</string>
			<key>OriginalRange</key>
			<string>{6817, 229}</string>
		</dict>
		<dict>
			<key>ModifiedContent</key>
			<string>circle.physicsBody = SKPhysicsBody(circleOfRadius: CGFloat(RADIUS))
circle.physicsBody!.categoryBitMask = ballCategory

print("Frame")
print(scene.frame)

//let edge = SKPhysicsBody(edgeLoopFrom: scene.frame)
//edge.categoryBitMask = edgeCategory
//edge.contactTestBitMask = ballCategory
//edge.collisionBitMask = ballCategory
//scene.physicsBody = edge

func createEdge(fromX: CGFloat, fromY: CGFloat, toX: CGFloat, toY: CGFloat) -&gt; SKPhysicsBody {
    let width = max(toX - fromX, 10)
    let height = max(toY - fromY, 10)
    let size = CGSize(width: width, height: height)
    let center = CGPoint(x: fromX + (fromX + width)/2, y: fromY + (fromY + height)/2)
    
    let edge = SKPhysicsBody(rectangleOf: size, center: center)
    edge.categoryBitMask = edgeCategory
    edge.contactTestBitMask = ballCategory
    edge.collisionBitMask = ballCategory
    
    return edge
}


let topEdge = createEdge(fromX: scene.frame.minX, fromY: scene.frame.minY, toX: scene.frame.minX + scene.frame.width, toY: scene.frame.minY)
let leftEdge = createEdge(fromX: scene.frame.minX, fromY:scene.frame.minY, toX: scene.frame.minX, toY:scene.frame.minY + scene.frame.height)
let bottomEdge = createEdge(fromX: scene.frame.minX, fromY:scene.frame.minY + scene.frame.height, toX: scene.frame.minX + scene.frame.width, toY:scene.frame.minY + scene.frame.height)
let rightEdge = createEdge(fromX: scene.frame.minX + scene.frame.width, fromY:scene.frame.minY, toX: scene.frame.minX + scene.frame.width, toY:scene.frame.minY + scene.frame.height)

let totalBody = SKPhysicsBody(bodies: [topEdge, leftEdge, bottomEdge, rightEdge])

//totalBody.categoryBitMask = edgeCategory
//totalBody.contactTestBitMask = ballCategory
//totalBody.collisionBitMask = ballCategory
totalBody.affectedByGravity = false

scene.physicsBody = totalBody
</string>
			<key>ModifiedRange</key>
			<string>{7890, 1813}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{7108, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
